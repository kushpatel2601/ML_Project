# Clustering Analysis Section
cluster_output = widgets.Output()
analyze_button = widgets.Button(description="üîç Analyze Travel Patterns")
visualize_button = widgets.Button(description="üìà Show Visualizations")

def analyze_patterns(_):
    global df, cluster_output

    with cluster_output:
        clear_output()
        if df is None or len(df) < 10:
            print("Insufficient data for pattern analysis!")
            return

        try:
            # Clustering analysis
            traveled_data = df[df['traveled'] == True].copy()

            if len(traveled_data) < 5:
                print("Need more travel records for clustering!")
                return

            # Prepare clustering features
            cluster_features = traveled_data[['distance', 'cost', 'emission']].values

            # Perform K-means clustering
            n_clusters = min(4, len(traveled_data))  # Max 4 clusters
            kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10) # Added n_init
            clusters = kmeans.fit_predict(cluster_features)

            traveled_data.loc[:, 'cluster'] = clusters

            # Analyze patterns
            results = f"""
üìä TRAVEL PATTERN ANALYSIS
{'='*50}

üîç CLUSTERING RESULTS:
‚Ä¢ Number of Clusters: {n_clusters}
‚Ä¢ Total Travel Records: {len(traveled_data)}

üìà CLUSTER ANALYSIS:
"""

            for i in range(n_clusters):
                cluster_data = traveled_data[traveled_data['cluster'] == i]
                results += f"""
üéØ CLUSTER {i+1} ({len(cluster_data)} records):
‚Ä¢ Avg Distance: {cluster_data['distance'].mean():.1f} km
‚Ä¢ Avg Cost: ‚Çπ{cluster_data['cost'].mean():.2f}
‚Ä¢ Avg Emission: {cluster_data['emission'].mean():.1f} units
‚Ä¢ Most Common Transport: {cluster_data['transport'].mode().iloc[0] if not cluster_data['transport'].mode().empty else 'N/A'}
‚Ä¢ Most Common Day: {cluster_data['day'].mode().iloc[0] if not cluster_data['day'].mode().empty else 'N/A'}
"""

            # Day-wise analysis
            day_analysis = df.groupby('day').agg({
                'traveled': ['count', 'sum'],
                'distance': 'mean',
                'cost': 'sum',
                'emission': 'sum'
            }).round(2)

            results += f"""
üìÖ DAY-WISE PATTERNS:
"""
            for day in days:
                if day in day_analysis.index:
                    total = day_analysis.loc[day, ('traveled', 'count')]
                    traveled_count = day_analysis.loc[day, ('traveled', 'sum')]
                    travel_rate = (traveled_count / total) * 100 if total > 0 else 0
                    avg_dist = day_analysis.loc[day, ('distance', 'mean')]
                    total_cost = day_analysis.loc[day, ('cost', 'sum')]
                    total_emission = day_analysis.loc[day, ('emission', 'sum')]

                    results += f"‚Ä¢ {day}: {travel_rate:.1f}% travel rate, Avg: {avg_dist:.1f}km, Cost: ‚Çπ{total_cost:.0f}, Emission: {total_emission:.0f}\n"

            # Transport mode analysis
            if not traveled_data.empty:
                transport_analysis = traveled_data['transport'].value_counts()
                results += f"""
üöó TRANSPORT MODE PREFERENCES:
"""
                for transport, count in transport_analysis.items():
                    percentage = (count / len(traveled_data)) * 100
                    avg_cost = traveled_data[traveled_data['transport'] == transport]['cost'].mean()
                    avg_emission = traveled_data[traveled_data['transport'] == transport]['emission'].mean()
                    results += f"‚Ä¢ {transport}: {count} trips ({percentage:.1f}%), Avg Cost: ‚Çπ{avg_cost:.2f}, Avg Emission: {avg_emission:.1f}\n"
            else:
                results += "üöó TRANSPORT MODE PREFERENCES:\n‚Ä¢ No travel data available.\n"


            # Weather impact
            if not df.empty:
                weather_analysis = df.groupby('weather').agg({
                    'traveled': 'mean',
                    'cost': 'mean',
                    'emission': 'mean'
                }).round(2)

                results += f"""
üå§Ô∏è WEATHER IMPACT:
"""
                for weather in weather_analysis.index:
                    travel_rate = weather_analysis.loc[weather, 'traveled'] * 100
                    avg_cost = weather_analysis.loc[weather, 'cost']
                    avg_emission = weather_analysis.loc[weather, 'emission']
                    results += f"‚Ä¢ {weather}: {travel_rate:.1f}% travel rate, Avg Cost: ‚Çπ{avg_cost:.2f}, Avg Emission: {avg_emission:.1f}\n"
            else:
                results += "üå§Ô∏è WEATHER IMPACT:\n‚Ä¢ No data available.\n"

            # Environmental insights
            if not traveled_data.empty:
                total_emission = traveled_data['emission'].sum()
                total_distance = traveled_data['distance'].sum()
                eco_score = max(0, 100 - (total_emission / max(total_distance, 1)))

                results += f"""
üåç ENVIRONMENTAL INSIGHTS:
‚Ä¢ Total Distance Traveled: {total_distance} km
‚Ä¢ Total Carbon Emission: {total_emission:.1f} units
‚Ä¢ Eco-Friendliness Score: {eco_score:.1f}/100
‚Ä¢ Average Emission per km: {total_emission/max(total_distance, 1):.2f} units/km
"""

                if eco_score > 70:
                    results += "‚Ä¢ ‚úÖ Great job! You're environmentally conscious!\n"
                elif eco_score > 40:
                    results += "‚Ä¢ ‚ö†Ô∏è Moderate environmental impact - consider greener options\n"
                else:
                    results += "‚Ä¢ üö® High environmental impact - switch to eco-friendly transport\n"
            else:
                results += "üåç ENVIRONMENTAL INSIGHTS:\n‚Ä¢ No travel data available.\n"


            print(results)

        except Exception as e:
            print(f"Error analyzing patterns: {str(e)}")


def show_visualizations(_):
    global df, cluster_output

    with cluster_output:
        clear_output()
        if df is None or len(df) < 5:
            print("Insufficient data for visualizations!")
            return

        try:
            # Create figure with subplots
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
            fig.suptitle('Travel Pattern Visualizations', fontsize=16, fontweight='bold')

            traveled_data = df[df['traveled'] == True]

            # 1. Daily travel frequency
            day_counts = df.groupby('day')['traveled'].sum().reindex(days)
            day_counts.plot(kind='bar', ax=ax1, color='skyblue', alpha=0.7)
            ax1.set_title('Travel Frequency by Day')
            ax1.set_ylabel('Number of Trips')
            ax1.tick_params(axis='x', rotation=45)

            # 2. Transport mode distribution
            if len(traveled_data) > 0:
                transport_counts = traveled_data['transport'].value_counts()
                ax2.pie(transport_counts.values, labels=transport_counts.index, autopct='%1.1f%%', startangle=90)
                ax2.set_title('Transport Mode Distribution')

            # 3. Cost vs Distance scatter plot
            if len(traveled_data) > 0:
                scatter = ax3.scatter(traveled_data['distance'], traveled_data['cost'],
                                    c=traveled_data['emission'], cmap='viridis', alpha=0.7)
                ax3.set_xlabel('Distance (km)')
                ax3.set_ylabel('Cost (‚Çπ)')
                ax3.set_title('Cost vs Distance (colored by Emission)')
                plt.colorbar(scatter, ax=ax3, label='Emission (units)')

                # Add trend line
                if len(traveled_data) > 1:
                    z = np.polyfit(traveled_data['distance'], traveled_data['cost'], 1)
                    p = np.poly1d(z)
                    ax3.plot(traveled_data['distance'], p(traveled_data['distance']),
                            "r--", alpha=0.8, linewidth=2)

            # 4. Weather impact on travel
            if not df.empty:
                weather_travel = df.groupby('weather')['traveled'].agg(['count', 'sum'])
                weather_travel['rate'] = (weather_travel['sum'] / weather_travel['count']) * 100
                weather_travel['rate'].plot(kind='bar', ax=ax4, color=['orange', 'blue', 'gray', 'yellow', 'lightblue'], alpha=0.7)
                ax4.set_title('Travel Rate by Weather Condition')
                ax4.set_ylabel('Travel Rate (%)')
                ax4.tick_params(axis='x', rotation=45)


            plt.tight_layout()
            plt.show()

        except Exception as e:
            print(f"Error creating visualizations: {str(e)}")


analyze_button.on_click(analyze_patterns)
visualize_button.on_click(show_visualizations)


cluster_box = widgets.VBox([
    widgets.Label(value="üìä Travel Pattern Analysis", style={'font_weight': 'bold'}),
    widgets.HBox([analyze_button, visualize_button]),
    cluster_output
])

display(cluster_box)